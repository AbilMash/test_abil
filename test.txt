1.Promise - это объект, представляющий будущий результат или значение завершения асинхронной операции; содержит своё состояние.Вначале pending («ожидание»), затем – одно из: fulfilled («выполнено успешно») или rejected («выполнено с ошибкой»).
var promise = new Promise(function(resolve, reject) {
Эта функция будет вызвана автоматически
В ней можно делать любые асинхронные операции,
А когда они завершатся — нужно вызвать одно из:
resolve(результат) при успешном выполнении
reject(ошибка) при ошибке
})

2.async/await - специальный синтаксис, который помогает в работе с promise-ами
В примере ниже, виды класса Thenable(про них я отдельно прочитал в гугле) будут работать вместе с await:

class Thenable {
  constructor(num) {
    this.num = num;
  }
  then(resolve, reject) {
    alert(resolve);
    // выполнить resolve со значением this.num * 2 через 1000мс
    setTimeout(() => resolve(this.num * 2), 1000); // (*)
  }
};

async function f() {
  // код будет ждать 1 секунду,
  // после чего значение result станет равным 2
  let result = await new Thenable(1);
  alert(result);
}

f();
Написал и проверил - работает:)

(ООП)Объектно-ориентированное программирование - это метод или подход, при котором программа работает, как набор взаимодействующих друг с другом объектов.

3.Контекст выполнения JS — это, если говорить упрощённо, концепция, описывающая окружение, в котором производится выполнение кода. Код всегда выполняется внутри некоего контекста.

4.Что такое замыкание и для чего оно используется?
Замыкание - это функция, у которой есть доступ к своей внешней функции по области видимости, даже после того, как внешняя функция прекратилась. Это говорит о том, что замыкание может запоминать и получать доступ, к переменным своей внешней функции, даже после того, как та прекратит выполнение.

const person()=> {
 let name = 'Peter';

 return function displayName() {
   console.log(name);
 };
}
let peter = person();
peter();

5.Стрелочные функции - функции, имеющие более короткий синтаксис по сравнению с функциональными выражениями и лексически привязаны к значению this(указанное выше в коде 2 вопроса, который я написал)
This — это ключевое слово, используемое в JavaScript, которое имеет особое значение, зависящее от контекста в котором оно применяетсяб, оно указывает на объект, который вызывает код.
У стрелочной функции нет собственного контекста, они наследуют this и arguments от родительской функции.

let func1 = function(number1, number2)
 {return number1 * number2} - обычная функция

let func2 = (number1, number2) => number2 * number3; - стрелочная функцияsta